@page "/admin/manage-quizes"

@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IAppState AppState

<SectionContent SectionName="pageTitle">Manage Quizes</SectionContent>


<div class="container"> 
	<div class="row ">
		<div class="col-sm-3 ms-auto">
			<label class="form-label">Select Category</label>
			<select class="form-control" @bind="_selectedCategory" @bind:after="
											OnSelectedCategoryChanged">
				<option value="0">Select Category</option>
				@foreach (var c in _categories)
				{
					<option value="@c.Id">@c.Name</option>
				}

			</select>

		</div>

	</div>

	<div class="row">
		<div class="table table-striped table-hover">
			<thead>

				<tr>
					<th>Name</th>
					<th>Category</th>
					<th>Number of Questions</th>
					<th>Time(in minutes)</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@if (_filteredQuizes.Length == 0)
				{
					<tr>
						<td colspan="5">
							<p class="text-danger text-center h5">No Quizes found </p></td>
					</tr>

				}
				else
				{


					@foreach (var q in _filteredQuizes)
					{
						<tr>
							<td>@q.Name</td>
							<td>@q.CategoryName</td>
							<td>@q.TotalQuestions questions</td>
							<td>@q.TimeInMinutes minutes</td>
							<td><div class="d-flex justify-content-around">
									<button type="button" class="btn btn-sm btn-info"
									@onclick="()=>ViewQuestionsAsync(q)">
										View Questions	</button>
<a href="/admin/quizes/{@q.Id}/view-students" class="btn btn-sm btn-success">View Attempts</a>
									<a href="admin/edit-quiz/@q.Id" class="btn btn-sm btn-primary">Edit</a>
								</div>
							</td>
						</tr>
					}
				}
			</tbody>
		</div>

	</div>

</div>

@if (_showQuestionsModal)
{
	<Modal Title="Questions" Size="ModalSize.Large"
	ActionButtonText="OK"
	OnActionButtonClick="()=>_showQuestionsModal=false"
	OnCancelClick="()=>_showQuestionsModal=false">
		@foreach(var q in _viewingQuestions)
		{
			<div class="mb-3 shadow p-2">
				@q.Text
			</div>
		}

	</Modal>
}


@code {

	private QuizListDto[] _quizzes=[];
	private QuizListDto[] _filteredQuizes=[];
	private CategoryDto[] _categories = [];
	private int _selectedCategory;

	private QuestionDto[] _viewingQuestions = [];
	private bool _showQuestionsModal;

	protected override async Task OnInitializedAsync(){
		AppState.ShowLoader("Fetching quizes and categories");

		try
		{

			var quizesTask = QuizApi.GetQuizesAsync();
			_categories = await CategoryApi.GetCategoriesAsync();
			_quizzes = await quizesTask;
			_filteredQuizes = _quizzes;
		}
		catch (Exception ex)
		{
			AppState.ShowError(ex.Message);

		}
		finally
		{

			AppState.HideLoader();
		}




	}
	private void OnSelectedCategoryChanged(){
		if (_selectedCategory==0)
		{
			_filteredQuizes = _quizzes;
			//return;
		}
		else
		{

			_filteredQuizes = _quizzes
			.Where(q => q.CategoryId == _selectedCategory).ToArray();
		}
	}

	private async Task ViewQuestionsAsync(QuizListDto q)
	{

		AppState.ShowLoader("Fetching categories");
		//Fetch the questions from the API
		_viewingQuestions=await QuizApi.GetQuizQuestionsAsync(q.Id);
		AppState.HideLoader();

		//_viewingQuestions = [.. _viewingQuestions, .. _viewingQuestions, .. _viewingQuestions, .. _viewingQuestions, .. _viewingQuestions];
		_showQuestionsModal = true;
	}

}
