@page "/student/home"


@inject IAppState AppState
@inject ICategoryApi CategoryApi
@inject IStudentQuizApi StudentQuizApi
@inject NavigationManager NavigationManager
@inject QuizState QuizState
@inject IPlatform Platform

<SectionContent SectionName="pageTitle"> 
	@(Platform.IsMobileApp? "Blazing Quiz" :"Home")</SectionContent>


<div class="container" style="min-height:calc(100vh - 75px - 15px -env(safe-area-inset-top))">
	<div class="row ">
		<div class="col-sm-3 ms-auto mb-3 mb-sm-0">
			<label class="form-label">Select Category</label>
			<select class="form-control" @bind="_selectedCategoryId" @bind:after="
											OnSelectedCategoryChanged">
				<option value="0">Select Category</option>
				@foreach (var c in _categories)
				{
					<option value="@c.Id">@c.Name</option>
				}
			</select>
		</div>
	</div>


	<div class="row ">
		@if(!_isLoading && _quizes.Length==0)
		{
			var message = _selectedCategoryId == 0
			? "There is no active quiz right now" 
			: 
			"There are no active quizes right now under the selected category";
			<p class="h4 text-danger mt-5 text-center">@message</p>
		}
		else
		{


			@foreach (var q in _quizes)
			{
				<div class="col-sm-4 mb-3">
					<div class="box bg-white p-3">
						<h5 class="fw-bold">@q.Name	</h5>
						<hr/>
						<table class="table ">
							<tr>
								<td>
									<label class="fw-bold ">
										Category
									</label>
								</td>
								<td>
									<span>
										@q.CategoryName
									</span>
								</td>
							</tr>
							<tr>
								<td>
									<label class="fw-bold ">
										No. Of Questions
									</label>
								</td>
								<td>
									<span>
										@q.TotalQuestions question(s)
									</span>
								</td>
							</tr>
							<tr>
								<td>
									<label class="fw-bold ">
										Total Time
									</label>
								</td>
								<td>
									<span>
										@q.TimeInMinutes minute(s)
									</span>
								</td>

							</tr>
						</table>
						<hr/>
						<button type="button" class="btn btn-sm btn-warning"
						@onclick="()=>_startingQuiz=q"
						>Start Quiz</button>
					</div>
				</div>
			}
		}
	</div>
</div>

@if(_startingQuiz != null)
{
	var title = $"Start {_startingQuiz.Name}";
	<Modal Title="@title" OnCancelClick="()=>_startingQuiz= null"
	OnActionButtonClick="StartQuizAsync">
		<p class="m-0 p-3">
			Do you want to start this quiz?
			<br />
			You will not be able to pauze the quiz.
		</p>

	</Modal>

}

@code {



	private CategoryDto[] _categories = [];
	private QuizListDto[] _quizes = [];

	private int _selectedCategoryId;
	private bool _isLoading;
	private QuizListDto? _startingQuiz;

	protected override async Task OnInitializedAsync(){

		AppState.ShowLoader("Fething categories and quizes");
		try
		{
			_isLoading = true;
			var categoriesTask = CategoryApi.GetCategoriesAsync();

			//Load/Fetch Quizes
			_quizes = await StudentQuizApi.GetActiveQuizesAsync(_selectedCategoryId);


			_categories = await categoriesTask;
		}
		catch (Exception ex)
		{
			AppState.ShowError(ex.Message);

		}
		finally
		{
			AppState.HideLoader();
			_isLoading = false;
		}

	}
	private async Task OnSelectedCategoryChanged(){
		AppState.ShowLoader("Fething categories and quizes");
		_quizes = await StudentQuizApi.GetActiveQuizesAsync(_selectedCategoryId);
		AppState.HideLoader();

	}
	private async Task StartQuizAsync()
	{
		AppState.ShowLoader("Preparing the quiz");
		try
		{

			QuizApiResponse<int> response = await StudentQuizApi.StartQuizAsync(_startingQuiz.Id);

			if (!response.IsSuccess)
			{
				//show error alert
				return;
			}

			int studentQuizId = response.data;
			QuizState.StartQuiz(_startingQuiz,studentQuizId);
			NavigationManager.NavigateTo("student/quiz");
		}
		catch (Exception ex)
		{
			AppState.ShowError(ex.Message);
			;
		}
		finally{
			AppState.HideLoader();
		}
	}
}
