 @page "/student/quiz"


@layout QuizPageLayout

@inject QuizState QuizState
@inject NavigationManager NavigationManager 
@inject IStudentQuizApi StudentQuizApi
@inject IAppState AppState 
@inject IPlatform Platform


<SectionContent SectionName="pageTitle">Quiz-@QuizState.Quiz?.Name
	<small>[@QuizState.Quiz?.TotalQuestions question(s)]</small>

</SectionContent>

@if (QuizState.Quiz !=null)
{

	string style = "";
	if (Platform.IsMobileApp)
	{

		//header is 60 px  + marginBottom on header is 15px + additional buffer gap 15 px
		style = "height:calc(100vh - 75px - 15px -env(safe-area-inset-top))";
	}
	<div class="row mb-3">
		
	  <div class="col-sm-12 d-flex flex-column" style="@style"> 
		<div class="quiz-header">
				<div class="my-1 d-flex justify-content-between align-items-center">
					<h6>@_questions.Count of @QuizState.Quiz.TotalQuestions</h6>
					<div>
						<QuizTimer TotalMinutes="QuizState.Quiz.TimeInMinutes"
								   OnTimerStop="AutoSubmitQuizAsync" />
					</div>

				</div>
				<h4 class="mt-3 mb-0 fw-bold">@_question.Text</h4>
				<hr />

		</div>
			

		<div class="quiz-body flex-grow-1">



			@foreach(var o in _question.Options)
			{
				<div class="d-flex gap-2 p-3 mb-3 bg-white option-box" 
				@onclick="()=>_selectedOptionId = o.Id">

					<input type="radio" class="" name="rdo_@_question.Id" id="rdo_@o.Id"

					checked="@(_selectedOptionId ==o.Id)"
					@onchange="()=>_selectedOptionId = o.Id"/>

					<label for="rdo_@o.Id" class="d-block">@o.Text</label>

				</div>
			}
		</div>

		<div class="quiz-footer mt-auto">


			@if (_errorMessage!=null)
			{
				<div class="bg-danger my-3 p-2 d-flex justify-content-between align-items-center">
					<label class="text-white">@_errorMessage</label>
					<button type="button" class="btn btn-sm btn-light" 
					@onclick="()=>_errorMessage=null">X</button>

				</div>


			}
			<hr />

			<div class="d-flex justify-content-between align-items-center">
				<button type="button" class="btn btn-danger" @onclick="()=> _showExitQuizConfiramtion=true">Exit Test</button>
				@if (!IsLastQuestion)
				{
					<button type="button" class="btn btn-primary" @onclick="SaveAndNextQuestionAsync">Save & Next</button>
				}
				else
				{
					<button type="button" class="btn btn-success" @onclick="SubmitQuizAsync">Submit Quiz</button>
				}

			</div>
			
		
		
		</div>
	</div>

</div>
}
@if (_submitQuizMessage !=null)
{
	<Modal Title="Quiz.Submitted" OnActionButtonClick="RedirectToMyQuizes" OnCancelClick="RedirectToMyQuizes">
		<p class="text-success h5"> @_submitQuizMessage</p>
	</Modal>
}
@if (_showExitQuizConfiramtion)
{
	<Modal Title="Exit Quiz?" 
		ActionButtonText="Yes"
	OnActionButtonClick="ExitQuizAsync"
	OnCancelClick="()=>_showExitQuizConfiramtion=false">
		<h5 class="text-danger">
			Do You Realy want to exit the quiz?
		</h5>
	</Modal>	
}


@code {

	private QuestionDto _question = new();

	private int _selectedOptionId;

	private List<QuestionDto> _questions = [];

	private bool IsLastQuestion => _questions.Count == QuizState.Quiz.TotalQuestions;

	private string? _errorMessage;

	private string? _submitQuizMessage;

	private bool _showExitQuizConfiramtion;

	protected override async Task OnInitializedAsync()
	{
		if (QuizState.Quiz==null || QuizState.StudentQuizId==0)
		{
			NavigationManager.NavigateTo("student/home", replace: true);
			return;
		}
		await LoadNextQuestionAsync();


	}

	private async Task ExitQuizAsync()
	{
		try
		{
			AppState.ShowLoader("Exiting the quiz");

			QuizApiResponse result = await StudentQuizApi.ExitQuizAsync(QuizState.StudentQuizId);
			if (!result.IsSuccess)
			{
				_errorMessage = result.ErrorMessage;
				return;
			}
			RedirectToMyQuizes();
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;	
		}
		finally
		{
			AppState.HideLoader();
		}
	}

	private async Task SaveAndNextQuestionAsync()
	{
		var isResponseSaved = await SaveQuestionResponseAsync();
		if (isResponseSaved)
			await LoadNextQuestionAsync();

	}

	private async Task<bool> SaveQuestionResponseAsync()
	{

		_errorMessage = null;
		if (_selectedOptionId == 0)
		{
			_errorMessage = "Please select an option";

			return false;
		}
		AppState.ShowLoader("Saving your response");
		try
		{
			StudentQuizQuestionResponeDto dto = new(QuizState.StudentQuizId, _question.Id, _selectedOptionId);
			QuizApiResponse result = await StudentQuizApi.SaveQuestionResponeAsync(QuizState.StudentQuizId, dto);
			if (!result.IsSuccess)
			{
				_errorMessage = result.ErrorMessage;
				await LoadNextQuestionAsync();
				return  false;
			}
			_selectedOptionId = 0;
			return true;
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
			return false;
		}
		finally
		{
			AppState.HideLoader();
		}



	}
	private async Task SubmitQuizAsync()
	{
		var isResponseSaved = await SaveQuestionResponseAsync();
		if (isResponseSaved)
		{

			AppState.ShowLoader("Submitting the quiz");
			try
			{
				QuizApiResponse result= await StudentQuizApi.SubmitQuizAsync(QuizState.StudentQuizId);
				if (!result.IsSuccess)
				{
					_errorMessage=result.ErrorMessage;
					return;
				}

				//ToDo:Show the resul in Modal Popup or in a separate page
				_submitQuizMessage = "Quiz submitted successgully";

			}
			catch (Exception ex)
			{
				_errorMessage = ex.Message;
				
			}

			finally
			{
				AppState.HideLoader();
			}
		}
	}

	private async Task LoadNextQuestionAsync()
	{
		AppState.ShowLoader("Fetching question");
		try
		{

			QuizApiResponse<QuestionDto?> result = await StudentQuizApi.GetNextQuestionForQuizAsync(QuizState.StudentQuizId);

			if (!result.IsSuccess || result.data == null)
			{
				//show error alert
				_errorMessage = result.ErrorMessage;
				return;
			}
			_question = result.data;
			_questions.Add(_question);

		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;

		}

		finally
		{
			AppState.HideLoader();
		}
	}

	private void RedirectToMyQuizes()
	{
		QuizState.StopQuiz();
		NavigationManager.NavigateTo("student/my-quizes", replace: true);
	}

	private async Task AutoSubmitQuizAsync()
	{
		try
		{
			AppState.ShowLoader("Auto Submitting the quiz");

			QuizApiResponse result = await StudentQuizApi.AutoSubmitQuizAsync(QuizState.StudentQuizId);
			if (!result.IsSuccess)
			{
				_errorMessage = result.ErrorMessage;
				return;
			}
			_submitQuizMessage = "Quiz submitted successfully";

			//RedirectToMyQuizes();
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			AppState.HideLoader();
		}
	}
}
