@page "/student/my-quizes"
@inject IAppState AppState
@inject IStudentQuizApi StudentQuizApi
@inject IPlatform Platform


<SectionContent SectionName="pageTitle">My Quizes</SectionContent>

<div class="container-fluid px-4-negative" style="@_containerStyle">
	<div class="row">
		<div class="col-sm-12">
			<div class="d-flex flex-column" style="@_flexStyle">
		<div class="table-responsive flex-grow-1">


			<QuickGrid ItemsProvider="_itemsProvider" Pagination="_paginationState"
			Class="table table-striped table-hover">

				<PropertyColumn Property="q=>q.QuizName" Title="Quiz Name" />
				<PropertyColumn Property="q=>q.CategoryName" Title="Category Name" />
				<PropertyColumn Property="q=>q.Status " />
				<PropertyColumn Property="q=>q.StartedOn" Title="Started On" Format="dd MM yy hh:mm" />

				<TemplateColumn Title="Completed">
					@if (context.CompletedOn.HasValue)
					{
						<span>
							@context.CompletedOn.Value.ToString("dd MM yy hh:mm")
						</span>
					}
					else
					{
						if (context.Status == "Exited")
						{
							<span>
								Quiz Exited
							</span>
						}
						else
						{
							<span>-</span>
						}
					}
				</TemplateColumn>

				<PropertyColumn Property="q=>q.Score" Class="text-center" />
			</QuickGrid>

		</div>
		<Paginator State="_paginationState" />

			</div>
		</div>
	</div>
</div>

@code {

	private GridItemsProvider<StudentQuizDto>? _itemsProvider;

	// private const  int DefaultPageSize = 10;

	// private PaginationState _paginationState = new PaginationState
	// 	{
	// 		ItemsPerPage = DefaultPageSize

	private int _defaultPageSize = 10;


	private string _flexStyle ="";
	private string _containerStyle ="";
	private PaginationState _paginationState = new();

	protected override void OnInitialized()
	{

		// if (Platform.IsMobileApp)
		// {
		// 	_defaultPageSize = 8;
		// }

		if (Platform.IsMobileApp)
		{
			_flexStyle = "height: calc(100vh - 75px - 15px - env(safe-area-inset-top));";
			_containerStyle = "width: calc(100% +3rem);";

		}
		_paginationState.ItemsPerPage = _defaultPageSize;
		_itemsProvider = async (request) =>
		{
			AppState.ShowLoader("Fetching quizes");
			var pageResult = await StudentQuizApi.GetStudentQuizesAsync(request.StartIndex
			, request.Count ?? _defaultPageSize);
			AppState.HideLoader();
			return GridItemsProviderResult.From(pageResult.Records, pageResult.totalCount);

		};
	}
}
