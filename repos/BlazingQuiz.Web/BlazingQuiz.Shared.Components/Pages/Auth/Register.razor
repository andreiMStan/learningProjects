 @page "/auth/register"
@using System.Security.Claims

@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject IAuthApi AuthApi
@inject IAppState AppState

@inject QuizAuthStateProvider QuizAuthStateProvider



<div class="container">
    <div class="row vh-100">
        <div class="col-11 col-sm-4 mx-auto my-auto border  bg-white shadow-lg">
            <div class="my-3">
                <h1 class="h3 fw-bold">Register | Blazing Quiz</h1>

            </div>

            <hr />
            <EditForm Model="_model" OnValidSubmit="RegisterAsync">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="form-label">Name:</label>
                    <InputText @bind-Value="_model.Name" class="form-control" />
                    <ValidationMessage For="()=>_model.Name" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Email:</label>
                    <InputText @bind-Value="_model.Email" class="form-control" />
                    <ValidationMessage For="()=>_model.Email" />
                </div>


                <div class="mb-3">
                    <label class="form-label">Phone:</label>
                    <InputText @bind-Value="_model.Phone" class="form-control" />
                    <ValidationMessage For="()=>_model.Phone" />
                </div>





                <div class="mb-3">
                    <label class="form-label">Password:</label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" />
                    <ValidationMessage For="()=>_model.Password" />

                </div>

                @if (_error != null)
                {
                    <div class="mb-3 bg-danger text-white p-2">
                        <p>@_error</p>
                    </div>
                }
                <div class="mb-3 d-flex justify-content-between">
                    @if (!_isBusy)
                    {
                        <a href="auth/login" class="btn btn-outline-primary" > Login </a>
                        <button type="submit" class="btn btn-success">Register</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">Registering....</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (_showSuccessAlert)
{
    <Modal Title="Success" OnActionButtonClick="OnModalClose"
    OnCancelClick="OnModalClose"> 
        <p class="h5 text-success">Your account has been created successfully. <br />
            .You will be able to login successfuly once ADmin approves your account
        </p>

    </Modal>
}
_showSuccessAlert

@code {
    private RegisterDto _model = new();
    private bool _isBusy;
    private string? _error;
    private bool _showSuccessAlert;

    protected override void OnInitialized()
    {
        if (QuizAuthStateProvider.IsLoggedIn)
        {
           NavigationManager.NavigateTo("/", replace: true);

        }
    }

    private async Task OnModalClose()
    {
        _model = new(); 
        NavigationManager.NavigateTo("auth/login");

    }

    private async Task RegisterAsync()

    {
        _error = null;
        _isBusy = true;

        try
        {
            AppState.ShowLoader("Registering");
            var apiResponse = await AuthApi.RegisterAsync(_model);
            if (!apiResponse.IsSuccess)
            {
                //show error allert
                _error = apiResponse.ErrorMessage;
                return;
            }
            _showSuccessAlert = true;

        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isBusy = false;
            AppState.HideLoader();

        }
    }







}
