 @page "/auth/login"
@using BlazingQuiz.Web.Auth
@using System.Security.Claims
@layout EmptyLayout
@inject IAuthApi AuthApi
@inject NavigationManager NavigationManager
@inject QuizAuthStateProvider QuizAuthStateProvider



<div class="container">
    <div class="row vh-100">
        <div class="col-sm-4 mx-auto my-auto border shadow-lg">
            <div class="my-3">
                <h1 class="h3">Login | Blazing Quiz</h1>

            </div>

            @* <AuthorizeView> *@
            @*     <Authorizing> *@
            @*         <p>Authorizing...</p> *@
            @*     </Authorizing> *@

            @*     <NotAuthorized> *@
            @*         <p>Not Authorized</p> *@
            @*     </NotAuthorized> *@
            @*     <Authorized> *@
            @*         <p> *@
            @*             Authorized: @context.User.Claims.FirstOrDefault( *@
            @*             c => c.Type == ClaimTypes.Name)?.Value *@
            @*         </p> *@

            @*     </Authorized> *@
            @* </AuthorizeView> *@
            <h3/>
            <EditForm Model="_model" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator/>
                <div class="mb-3">
                    <label class="form-label">UserName:</label>

                    <InputText @bind-Value="_model.UserName" class="form-control" />
                    <ValidationMessage For="()=>_model.UserName"/>
                </div>

                <div class="mb-3">
                    <label class="form-label">Password:</label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" />
                    <ValidationMessage For="()=>_model.Password" />

                </div>

                @if(_error!=null)
                {
                    <div class="mb-3 bg-danger text-white p-2">
                        <p>@_error</p>
                    </div>
                }
                <div class="mb-3">
                    @if (!_isBusy)
                    {
                        <button type="submit" class="btn btn-success">Login</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">Logging-in....</button>

                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginDto _model = new();
    private bool _isBusy;
    private string? _error;

    protected override void OnInitialized()
    {
        if (QuizAuthStateProvider.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/", replace: true);
            return;
    }
    }
    private async Task LoginAsync()

    {
        _error = null ;
        _isBusy = true;

        try
        {
            var authResponse = await AuthApi.LoginAsync(_model);
            if (authResponse.HasError)
            {
                //show error allert
                _error = authResponse.ErrorMessage;
                return;
            }
            //see the login token in some storage
            //implement provide
            //navigate to protected page 
            var loggedInUser = authResponse.User;
            await QuizAuthStateProvider.SetLoginAsync(loggedInUser);
            
            NavigationManager.NavigateTo("/");
		}
		catch (Exception ex)
		{
			_error = ex.Message; 
		}
		finally{
		_isBusy = false;
		}
	}







}
